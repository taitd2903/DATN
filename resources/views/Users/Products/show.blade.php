@extends('layouts.app')

@section('content')
<h1>{{ $product->name }}</h1>
<p>{{ $product->description }}</p>
<p>Danh m·ª•c: {{ $product->category->name }}</p>

{{-- Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng t·ªìn kho --}}
<p><strong>T·ªìn kho: </strong> 
    <span id="stock-info">{{ $product->variants->sum('stock_quantity') }}</span>
</p>

{{-- Hi·ªÉn th·ªã gi√° s·∫£n ph·∫©m --}}
<p><strong>Gi√°: </strong> 
    <span id="base-price">
        {{ number_format($product->base_price, 0, ',', '.') }} VNƒê
    </span>
    <span id="variant-price" style="font-weight: bold; margin-left: 10px;"></span>
</p>

<form id="cartForm" action="{{ route('cart.add') }}" method="POST">
    @csrf
    <input type="hidden" name="product_id" value="{{ $product->id }}">
    <input type="hidden" name="variant_id" id="variant_id">

    {{-- Ch·ªçn Size (ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥ size) --}}
    @if ($product->variants->pluck('size')->filter()->count() > 0)
        <h4>Ch·ªçn Size:</h4>
        <div class="option-group size-group">
            @foreach ($product->variants->pluck('size')->unique()->filter() as $size)
                <button type="button" class="selection-box size-btn" onclick="toggleSize('{{ $size }}', this)">
                    {{ $size }}
                </button>
            @endforeach
        </div>
    @endif

    {{-- Ch·ªçn M√†u s·∫Øc --}}
    <h4>Ch·ªçn M√†u s·∫Øc:</h4>
    <div class="option-group color-group">
        @foreach ($product->variants->pluck('color')->unique() as $color)
            <button type="button" class="selection-box color-btn" onclick="toggleColor('{{ $color }}', this)" data-color="{{ $color }}">
                @if ($product->variants->where('color', $color)->first()->image)
                    <img src="{{ $product->variants->where('color', $color)->first()->image }}" width="24">
                @endif
                {{ $color }}
            </button>
        @endforeach
    </div>

    {{-- Nh·∫≠p s·ªë l∆∞·ª£ng --}}
    <h4>Ch·ªçn s·ªë l∆∞·ª£ng:</h4>
    <input type="number" id="quantity" name="quantity" value="1" min="1" required>

    {{-- N√∫t Th√™m v√†o Gi·ªè h√†ng --}}
    <button type="submit" class="add-to-cart-btn" onclick="updateVariantId(event)">
        üõí Th√™m v√†o gi·ªè h√†ng
    </button>
</form>

<a href="{{ route('products.index') }}">Quay l·∫°i danh s√°ch s·∫£n ph·∫©m</a>

<style>
    .selection-box {
        padding: 8px 12px;
        border: 1px solid #ccc;
        background: white;
        cursor: pointer;
        margin: 5px;
        border-radius: 5px;
    }

    .selection-box.selected {
        border: 2px solid red;
        background: #ffebeb;
    }

    .selection-box.disabled {
        opacity: 0.5;
        cursor: not-allowed;
        text-decoration: line-through;
    }
</style>

<script>
    let selectedSize = null;
    let selectedColor = null;
    let selectedStock = null;
    let productVariants = @json($product->variants);

    // H√†m toggle Size (Ch·ªçn v√† B·ªè ch·ªçn)
    function toggleSize(size, button) {
        if (selectedSize === size) {
            // N·∫øu ƒë√£ ch·ªçn, b·∫•m l·∫°i ƒë·ªÉ b·ªè ch·ªçn
            selectedSize = null;
            button.classList.remove('selected');
        } else {
            // N·∫øu ch∆∞a ch·ªçn ho·∫∑c ch·ªçn m·ªõi
            selectedSize = size;
            resetSelection('.size-group .selection-box', button);
        }
        updateAvailableColors();
        updatePriceAndStock();
    }

    // H√†m toggle Color (Ch·ªçn v√† B·ªè ch·ªçn)
    function toggleColor(color, button) {
        if (button.classList.contains('disabled')) return;

        if (selectedColor === color) {
            // N·∫øu ƒë√£ ch·ªçn, b·∫•m l·∫°i ƒë·ªÉ b·ªè ch·ªçn
            selectedColor = null;
            button.classList.remove('selected');
        } else {
            // N·∫øu ch∆∞a ch·ªçn ho·∫∑c ch·ªçn m·ªõi
            selectedColor = color;
            resetSelection('.color-group .selection-box', button);
        }

        // N·∫øu s·∫£n ph·∫©m kh√¥ng c√≥ size, b·ªè ch·ªçn size khi ch·ªçn m√†u
        if (document.querySelector('.size-group') === null) {
            selectedSize = null;
        }

        updatePriceAndStock();
    }

    // Reset tr·∫°ng th√°i ch·ªçn
    function resetSelection(selector, button) {
        document.querySelectorAll(selector).forEach(btn => btn.classList.remove('selected'));
        button.classList.add('selected');
    }

    // C·∫≠p nh·∫≠t m√†u kh·∫£ d·ª•ng d·ª±a tr√™n size
    function updateAvailableColors() {
        document.querySelectorAll('.color-group .selection-box').forEach(btn => {
            let color = btn.getAttribute('data-color');
            let exists = productVariants.some(v => v.size == selectedSize && v.color == color);
            btn.classList.toggle('disabled', !exists);
        });
    }

    // C·∫≠p nh·∫≠t gi√° v√† t·ªìn kho d·ª±a tr√™n bi·∫øn th·ªÉ
    function updatePriceAndStock() {
        let basePrice = document.getElementById('base-price');
        let variantPrice = document.getElementById('variant-price');
        let stockInfo = document.getElementById('stock-info');
        let quantityInput = document.getElementById('quantity');

        if (!selectedColor) {
            basePrice.style.textDecoration = "none";
            variantPrice.innerHTML = "";
            stockInfo.innerHTML = {{ $product->variants->sum('stock_quantity') }};
            quantityInput.removeAttribute("max");
            return;
        }

        let selectedVariant = productVariants.find(variant =>
            (!selectedSize || variant.size == selectedSize) && variant.color == selectedColor
        );

        if (selectedVariant) {
            basePrice.style.textDecoration = "line-through";
            variantPrice.innerHTML = `${selectedVariant.price.toLocaleString()} VNƒê`;
            
            // Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng t·ªìn kho theo bi·∫øn th·ªÉ
            selectedStock = selectedVariant.stock_quantity;
            stockInfo.innerHTML = selectedStock;

            // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng theo t·ªìn kho
            quantityInput.max = selectedStock;
            if (quantityInput.value > selectedStock) {
                quantityInput.value = selectedStock;
            }
        } else {
            basePrice.style.textDecoration = "none";
            variantPrice.innerHTML = "";
            stockInfo.innerHTML = {{ $product->variants->sum('stock_quantity') }};
            quantityInput.removeAttribute("max");
        }
    }

    // X·ª≠ l√Ω c·∫≠p nh·∫≠t bi·∫øn th·ªÉ khi g·ª≠i form
    function updateVariantId(event) {
        if (!selectedColor) {
            alert('Vui l√≤ng ch·ªçn m√†u s·∫Øc tr∆∞·ªõc khi th√™m v√†o gi·ªè h√†ng.');
            event.preventDefault();
            return;
        }

        let selectedVariant = productVariants.find(variant =>
            (!selectedSize || variant.size == selectedSize) && variant.color == selectedColor
        );

        if (!selectedVariant) {
            alert('Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ ph√π h·ª£p.');
            event.preventDefault();
            return;
        }

        document.getElementById('variant_id').value = selectedVariant.id;
    }
</script>
@endsection
